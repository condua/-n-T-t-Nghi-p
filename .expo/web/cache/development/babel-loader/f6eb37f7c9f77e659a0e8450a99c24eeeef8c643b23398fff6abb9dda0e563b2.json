{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport default function createNumberMask(props) {\n  var _ref = props || {},\n    _ref$delimiter = _ref.delimiter,\n    delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n    _ref$precision = _ref.precision,\n    precision = _ref$precision === void 0 ? 2 : _ref$precision,\n    _ref$prefix = _ref.prefix,\n    prefix = _ref$prefix === void 0 ? [] : _ref$prefix,\n    _ref$separator = _ref.separator,\n    separator = _ref$separator === void 0 ? ',' : _ref$separator;\n  return function (value) {\n    var numericValue = (value === null || value === void 0 ? void 0 : value.replace(/\\D+/g, '')) || '';\n    var mask = numericValue.split('').map(function () {\n      return /\\d/;\n    });\n    var shouldAddSeparatorOnMask = precision > 0 && !!separator;\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n    var amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n    if (delimiter) {\n      for (var i = 0; i < amountOfDelimiters; i++) {\n        var precisionOffset = precision;\n        var separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        var thousandOffset = 3 + (delimiter ? 1 : 0);\n        var delimiterPosition = -precisionOffset - separatorOffset - i * thousandOffset - 3;\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n    return [].concat(_toConsumableArray(prefix), _toConsumableArray(mask));\n  };\n}","map":{"version":3,"names":["createNumberMask","props","_ref","_ref$delimiter","delimiter","_ref$precision","precision","_ref$prefix","prefix","_ref$separator","separator","value","numericValue","replace","mask","split","map","shouldAddSeparatorOnMask","length","splice","amountOfDelimiters","Math","ceil","i","precisionOffset","separatorOffset","thousandOffset","delimiterPosition","concat","_toConsumableArray"],"sources":["D:\\Finacial-Management\\front-end\\node_modules\\react-native-mask-input\\lib\\module\\createNumberMask.ts"],"sourcesContent":["import type { MaskArray } from './formatWithMask.types';\n\nimport type { Mask } from './formatWithMask.types';\nimport type { CreateNumberMaskProps } from './createNumberMask.types';\n\nexport default function createNumberMask(props?: CreateNumberMaskProps): Mask {\n  const { delimiter = '.', precision = 2, prefix = [], separator = ',' } = props || {};\n\n  return (value?: string) => {\n    const numericValue = value?.replace(/\\D+/g, '') || '';\n\n    let mask: MaskArray = numericValue.split('').map(() => /\\d/);\n\n    const shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    const amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (let i = 0; i < amountOfDelimiters; i++) {\n        const precisionOffset = precision;\n        const separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        const thousandOffset = 3 + (delimiter ? 1 : 0);\n        const delimiterPosition =\n          -precisionOffset - separatorOffset - i * thousandOffset - 3;\n\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [...prefix, ...mask];\n  };\n}\n"],"mappings":";AAKA,eAAe,SAASA,gBAATA,CAA0BC,KAA1B,EAA+D;EAC5E,IAAAC,IAAA,GAAyED,KAAK,IAAI,EAAlF;IAAAE,cAAA,GAAAD,IAAA,CAAQE,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,GAAd,GAAAA,cAAA;IAAAE,cAAA,GAAAH,IAAA,CAAmBI,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,CAA/B,GAAAA,cAAA;IAAAE,WAAA,GAAAL,IAAA,CAAkCM,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,EAA3C,GAAAA,WAAA;IAAAE,cAAA,GAAAP,IAAA,CAA+CQ,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,MAAAA,cAAA;EAEjE,OAAQ,UAAAE,KAAD,EAAoB;IACzB,IAAMC,YAAY,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,OAAP,CAAe,MAAf,EAAuB,EAAvB,MAA8B,EAAnD;IAEA,IAAIC,IAAe,GAAGF,YAAY,CAACG,KAAb,CAAmB,EAAnB,EAAuBC,GAAvB,CAA2B;MAAA,OAAM,IAAjC;IAAA,EAAtB;IAEA,IAAMC,wBAAwB,GAAGX,SAAS,GAAG,CAAZ,IAAiB,CAAC,CAACI,SAApD;IAEA,IAAII,IAAI,CAACI,MAAL,GAAcZ,SAAd,IAA2BW,wBAA/B,EAAyD;MACvDH,IAAI,CAACK,MAAL,CAAY,CAACb,SAAb,EAAwB,CAAxB,EAA2BI,SAA3B;IACD;IAED,IAAMU,kBAAkB,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACV,YAAY,CAACM,MAAb,GAAsBZ,SAAvB,IAAoC,CAA9C,IAAmD,CAA9E;IAEA,IAAIF,SAAJ,EAAe;MACb,KAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAApB,EAAwCG,CAAC,EAAzC,EAA6C;QAC3C,IAAMC,eAAe,GAAGlB,SAAxB;QACA,IAAMmB,eAAe,GAAGR,wBAAwB,GAAG,CAAH,GAAO,CAAvD;QACA,IAAMS,cAAc,GAAG,KAAKtB,SAAS,GAAG,CAAH,GAAO,CAArB,CAAvB;QACA,IAAMuB,iBAAiB,GACrB,CAACH,eAAD,GAAmBC,eAAnB,GAAqCF,CAAC,GAAGG,cAAzC,GAA0D,CAD5D;QAGAZ,IAAI,CAACK,MAAL,CAAYQ,iBAAZ,EAA+B,CAA/B,EAAkCvB,SAAlC;MACD;IACF;IAED,UAAAwB,MAAA,CAAAC,kBAAA,CAAWrB,MAAJ,GAAAqB,kBAAA,CAAef,IAAf;EACR,CA1BD;AA2BD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as React from 'react';\nimport formatWithMask from \"./formatWithMask\";\nexport default (function (props) {\n  var value = props.value,\n    mask = props.mask,\n    onChangeText = props.onChangeText,\n    _props$placeholderFil = props.placeholderFillCharacter,\n    placeholderFillCharacter = _props$placeholderFil === void 0 ? '_' : _props$placeholderFil,\n    obfuscationCharacter = props.obfuscationCharacter,\n    showObfuscatedValue = props.showObfuscatedValue,\n    maskAutoComplete = props.maskAutoComplete;\n  var maskArray = React.useMemo(function () {\n    return typeof mask === 'function' ? mask(value) : mask;\n  }, [mask, value]);\n  var formattedValueResult = React.useMemo(function () {\n    return formatWithMask({\n      text: value || '',\n      mask: mask,\n      obfuscationCharacter: obfuscationCharacter\n    });\n  }, [mask, obfuscationCharacter, value]);\n  var maskHasObfuscation = React.useMemo(function () {\n    return maskArray && !!maskArray.find(function (maskItem) {\n      return Array.isArray(maskItem);\n    });\n  }, [maskArray]);\n  var isValueObfuscated = React.useMemo(function () {\n    return !!maskHasObfuscation && !!showObfuscatedValue;\n  }, [maskHasObfuscation, showObfuscatedValue]);\n  var handleChangeText = React.useCallback(function (text) {\n    var textToFormat = text;\n    if (isValueObfuscated) {\n      textToFormat = formattedValueResult.masked || '';\n      if (textToFormat.length > text.length) {\n        textToFormat = textToFormat.slice(0, -1);\n      } else if (textToFormat.length < text.length) {\n        textToFormat = textToFormat + text[text.length - 1];\n      }\n    }\n    var result = formatWithMask({\n      text: textToFormat,\n      mask: mask,\n      obfuscationCharacter: obfuscationCharacter,\n      maskAutoComplete: maskAutoComplete && textToFormat.length > formattedValueResult.masked.length\n    });\n    onChangeText && onChangeText(result.masked, result.unmasked, result.obfuscated);\n  }, [isValueObfuscated, mask, obfuscationCharacter, onChangeText, formattedValueResult.masked, maskAutoComplete]);\n  var defaultPlaceholder = React.useMemo(function () {\n    if (maskArray) {\n      return maskArray.map(function (maskChar) {\n        if (typeof maskChar === 'string') {\n          return maskChar;\n        } else {\n          return placeholderFillCharacter;\n        }\n      }).join('');\n    } else {\n      return undefined;\n    }\n  }, [maskArray, placeholderFillCharacter]);\n  var inputValue = isValueObfuscated ? formattedValueResult.obfuscated : formattedValueResult.masked;\n  return {\n    onChangeText: handleChangeText,\n    value: inputValue,\n    selection: isValueObfuscated ? {\n      start: inputValue.length,\n      end: inputValue.length\n    } : undefined,\n    placeholder: defaultPlaceholder\n  };\n});","map":{"version":3,"names":["React","formatWithMask","props","value","mask","onChangeText","_props$placeholderFil","placeholderFillCharacter","obfuscationCharacter","showObfuscatedValue","maskAutoComplete","maskArray","useMemo","formattedValueResult","text","maskHasObfuscation","find","maskItem","Array","isArray","isValueObfuscated","handleChangeText","useCallback","textToFormat","masked","length","slice","result","unmasked","obfuscated","defaultPlaceholder","map","maskChar","join","undefined","inputValue","selection","start","end","placeholder"],"sources":["D:\\Finacial-Management\\Front-end\\node_modules\\react-native-mask-input\\lib\\module\\useMaskedInputProps.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport formatWithMask from './formatWithMask';\nimport type { UseMaskedInputProps } from './useMaskedInputProps.types';\n\nexport default (props: UseMaskedInputProps) => {\n  const {\n    value,\n    mask,\n    onChangeText,\n    placeholderFillCharacter = '_',\n    obfuscationCharacter,\n    showObfuscatedValue,\n    maskAutoComplete,\n  } = props;\n\n  const maskArray = React.useMemo(\n    () => (typeof mask === 'function' ? mask(value) : mask),\n    [mask, value]\n  );\n\n  const formattedValueResult = React.useMemo(() => {\n    return formatWithMask({ text: value || '', mask, obfuscationCharacter });\n  }, [mask, obfuscationCharacter, value]);\n\n  const maskHasObfuscation = React.useMemo(\n    () => maskArray && !!maskArray.find((maskItem) => Array.isArray(maskItem)),\n    [maskArray]\n  );\n\n  const isValueObfuscated = React.useMemo(\n    () => !!maskHasObfuscation && !!showObfuscatedValue,\n    [maskHasObfuscation, showObfuscatedValue]\n  );\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      let textToFormat = text;\n\n      if (isValueObfuscated) {\n        textToFormat = formattedValueResult.masked || '';\n\n        if (textToFormat.length > text.length) {\n          textToFormat = textToFormat.slice(0, -1);\n        } else if (textToFormat.length < text.length) {\n          textToFormat = textToFormat + text[text.length - 1];\n        }\n      }\n\n      const result = formatWithMask({\n        text: textToFormat,\n        mask,\n        obfuscationCharacter,\n        maskAutoComplete:\n          maskAutoComplete && textToFormat.length > formattedValueResult.masked.length,\n      });\n\n      onChangeText && onChangeText(result.masked, result.unmasked, result.obfuscated);\n    },\n    [\n      isValueObfuscated,\n      mask,\n      obfuscationCharacter,\n      onChangeText,\n      formattedValueResult.masked,\n      maskAutoComplete,\n    ]\n  );\n\n  const defaultPlaceholder = React.useMemo(() => {\n    if (maskArray) {\n      return maskArray\n        .map((maskChar) => {\n          if (typeof maskChar === 'string') {\n            return maskChar;\n          } else {\n            return placeholderFillCharacter;\n          }\n        })\n        .join('');\n    } else {\n      return undefined;\n    }\n  }, [maskArray, placeholderFillCharacter]);\n\n  const inputValue = isValueObfuscated\n    ? formattedValueResult.obfuscated\n    : formattedValueResult.masked;\n\n  return {\n    onChangeText: handleChangeText,\n    value: inputValue,\n    selection: isValueObfuscated\n      ? { start: inputValue.length, end: inputValue.length }\n      : undefined,\n    placeholder: defaultPlaceholder,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Surface, Shape, Path, Group } from '@react-native-community/art';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction createPath(cx, cy, r, startAngle, arcAngle, isBezian, innerRadius) {\n  var p = new Path();\n  if (isBezian) {\n    var roundnessOutside = 1 - (r - innerRadius) / innerRadius - arcAngle * .5;\n    var roundnessInside = 1 + (r - innerRadius) / innerRadius + arcAngle * .5;\n    var pullback = 0.05;\n    var anchorForward = .15;\n    p.moveTo(cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback));\n    p.onBezierCurve(undefined, undefined, cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback), cx + r * Math.cos(startAngle + anchorForward), cy + r * Math.sin(startAngle + anchorForward), cx + r * roundnessInside * Math.cos(startAngle + pullback), cy + r * roundnessInside * Math.sin(startAngle + pullback));\n  } else {\n    p.moveTo(cx + r * Math.cos(startAngle), cy + r * Math.sin(startAngle));\n    p.onArc(undefined, undefined, undefined, undefined, cx, cy, r, r, startAngle, startAngle + arcAngle);\n  }\n  return p;\n}\nvar ArcShape = function ArcShape(_ref) {\n  var dimensions = _ref.dimensions,\n    color = _ref.color,\n    strokeCap = _ref.strokeCap,\n    startAngle = _ref.startAngle,\n    arcAngle = _ref.arcAngle,\n    isBezian = _ref.isBezian;\n  var radius = dimensions.radius,\n    innerRadius = dimensions.innerRadius,\n    width = dimensions.width,\n    dividerSize = dimensions.dividerSize;\n  var path = createPath(radius, radius, radius - width / 2, startAngle / 180 * Math.PI, arcAngle / 180 * Math.PI, isBezian, innerRadius);\n  var strokeWidth = isBezian ? arcAngle * 5 : width;\n  return _jsx(Shape, {\n    d: path,\n    stroke: color,\n    strokeWidth: strokeWidth,\n    strokeCap: strokeCap\n  });\n};\nvar Background = function Background(_ref2) {\n  var dimensions = _ref2.dimensions,\n    color = _ref2.color;\n  return _jsx(ArcShape, {\n    dimensions: dimensions,\n    color: color,\n    startAngle: 0,\n    arcAngle: 360\n  });\n};\nvar getArcAngle = function getArcAngle(percentage) {\n  return percentage / 100 * 360;\n};\nvar shouldShowDivider = function shouldShowDivider(sections, dividerSize) {\n  return sections.length > 1 && !Number.isNaN(dividerSize);\n};\nvar Sections = function Sections(_ref3) {\n  var dimensions = _ref3.dimensions,\n    paintedSections = _ref3.paintedSections,\n    sections = _ref3.sections,\n    shouldShowRoundDividers = _ref3.shouldShowRoundDividers,\n    strokeCapForLargeBands = _ref3.strokeCapForLargeBands;\n  var startValue = 0;\n  var radius = dimensions.radius,\n    width = dimensions.width,\n    dividerSize = dimensions.dividerSize;\n  var showDividers = shouldShowDivider(sections, dividerSize);\n  paintedSections = sections.map(function (section, idx) {\n    var percentage = section.percentage,\n      color = section.color;\n    var startAngle = startValue / 100 * 360;\n    var arcAngle = getArcAngle(percentage);\n    startValue += percentage;\n    shouldShowRoundDividers && paintedSections.push({\n      percentage: percentage,\n      color: color,\n      startAngle: startAngle,\n      arcAngle: arcAngle\n    });\n    return _jsx(ArcShape, {\n      dimensions: dimensions,\n      color: color,\n      startAngle: showDividers ? startAngle + dividerSize : startAngle,\n      arcAngle: showDividers ? arcAngle - dividerSize : arcAngle,\n      strokeCap: strokeCapForLargeBands\n    }, idx);\n  });\n  return paintedSections;\n};\nvar RoundDividers = function RoundDividers(_ref4) {\n  var dimensions = _ref4.dimensions,\n    paintedSections = _ref4.paintedSections,\n    backgroundColor = _ref4.backgroundColor,\n    visible = _ref4.visible;\n  var dividerSize = dimensions.dividerSize,\n    radius = dimensions.radius,\n    innerRadius = dimensions.innerRadius,\n    width = dimensions.width;\n  var dividerOffSet = dividerSize * 2 + 6;\n  var strokeCap = 'butt';\n  var isBezian = true;\n  var dividerColorOverlayArray = [];\n  var dividerArray = [];\n  if (paintedSections.length > 1 && visible) {\n    paintedSections.forEach(function (section, index) {\n      var color = section.color,\n        startAngle = section.startAngle;\n      for (var i = 0; i < dividerSize + 2; i++) {\n        dividerArray.push(_jsx(ArcShape, {\n          dimensions: dimensions,\n          color: backgroundColor,\n          startAngle: startAngle + section.arcAngle + dividerSize + i - dividerOffSet,\n          arcAngle: 1,\n          isBezian: isBezian,\n          strokeCap: strokeCap\n        }, index));\n        dividerColorOverlayArray.push(_jsx(ArcShape, {\n          dimensions: dimensions,\n          color: color,\n          startAngle: startAngle + section.arcAngle - dividerSize + i - dividerOffSet,\n          arcAngle: 1,\n          isBezian: isBezian,\n          strokeCap: strokeCap\n        }, index));\n      }\n    });\n  }\n  return _jsxs(Group, {\n    children: [dividerArray, dividerColorOverlayArray]\n  });\n};\nvar CleanUpCircles = function CleanUpCircles(_ref5) {\n  var dimensions = _ref5.dimensions,\n    backgroundColor = _ref5.backgroundColor,\n    visible = _ref5.visible;\n  var radius = dimensions.radius,\n    innerRadius = dimensions.innerRadius,\n    width = dimensions.width;\n  var innerBackgroundPath = createPath(radius, radius, innerRadius - width / 2, 0, 360);\n  var outerBackgroundPath = createPath(radius, radius, radius + width / 2, 0, 360);\n  if (width < 100 && visible) {\n    return _jsxs(_Fragment, {\n      children: [_jsx(Shape, {\n        d: innerBackgroundPath,\n        stroke: backgroundColor,\n        strokeWidth: width\n      }), _jsx(Shape, {\n        d: outerBackgroundPath,\n        stroke: backgroundColor,\n        strokeWidth: width\n      })]\n    });\n  }\n  return null;\n};\nvar Pie = function Pie(_ref6) {\n  var sections = _ref6.sections,\n    radius = _ref6.radius,\n    innerRadius = _ref6.innerRadius,\n    backgroundColor = _ref6.backgroundColor,\n    strokeCap = _ref6.strokeCap,\n    dividerSize = _ref6.dividerSize;\n  strokeCapForLargeBands = dividerSize > 0 || strokeCap == 'butt' ? 'butt' : 'butt';\n  var shouldShowRoundDividers = strokeCap === 'round';\n  var paintedSections = [];\n  var width = radius - innerRadius;\n  var dimensions = {\n    radius: radius,\n    innerRadius: innerRadius,\n    width: width,\n    dividerSize: dividerSize\n  };\n  return _jsx(Surface, {\n    width: radius * 2,\n    height: radius * 2,\n    children: _jsxs(Group, {\n      rotation: -90,\n      originX: radius,\n      originY: radius,\n      children: [_jsx(Background, {\n        dimensions: dimensions,\n        color: backgroundColor\n      }), _jsx(Sections, {\n        dimensions: dimensions,\n        paintedSections: paintedSections,\n        sections: sections,\n        strokeCapForLargeBands: strokeCapForLargeBands,\n        shouldShowRoundDividers: shouldShowRoundDividers\n      }), _jsx(RoundDividers, {\n        dimensions: dimensions,\n        paintedSections: paintedSections,\n        backgroundColor: backgroundColor,\n        visible: shouldShowRoundDividers\n      }), _jsx(CleanUpCircles, {\n        dimensions: dimensions,\n        backgroundColor: backgroundColor,\n        visible: shouldShowRoundDividers\n      })]\n    })\n  });\n};\nexport default Pie;\nPie.propTypes = {\n  sections: PropTypes.arrayOf(PropTypes.exact({\n    percentage: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired\n  })).isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  strokeCap: PropTypes.string,\n  dividerSize: PropTypes.number\n};\nPie.defaultProps = {\n  dividerSize: 0,\n  innerRadius: 0,\n  backgroundColor: '#fff',\n  strokeCap: 'butt'\n};","map":{"version":3,"names":["React","PropTypes","Platform","Surface","Shape","Path","Group","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","createPath","cx","cy","r","startAngle","arcAngle","isBezian","innerRadius","p","roundnessOutside","roundnessInside","pullback","anchorForward","moveTo","Math","cos","sin","onBezierCurve","undefined","onArc","ArcShape","_ref","dimensions","color","strokeCap","radius","width","dividerSize","path","PI","strokeWidth","d","stroke","Background","_ref2","getArcAngle","percentage","shouldShowDivider","sections","length","Number","isNaN","Sections","_ref3","paintedSections","shouldShowRoundDividers","strokeCapForLargeBands","startValue","showDividers","map","section","idx","push","RoundDividers","_ref4","backgroundColor","visible","dividerOffSet","dividerColorOverlayArray","dividerArray","forEach","index","i","children","CleanUpCircles","_ref5","innerBackgroundPath","outerBackgroundPath","Pie","_ref6","height","rotation","originX","originY","propTypes","arrayOf","exact","number","isRequired","string","defaultProps"],"sources":["D:/Finacial-Management/Front-end/node_modules/react-native-pie/src/Pie.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform } from 'react-native';\nimport { Surface, Shape, Path, Group } from '@react-native-community/art';\n\nfunction createPath(cx, cy, r, startAngle, arcAngle, isBezian, innerRadius) {\n  const p = new Path();\n  //starting point of our chart\n  if(isBezian){\n    const roundnessOutside = 1 - ((r - innerRadius)/ innerRadius) - (arcAngle * .5);\n    const roundnessInside = 1 + ((r - innerRadius)/ innerRadius) + (arcAngle * .5);\n    const pullback = 0.05;\n    const anchorForward = .15;\n      //This is for the part that is the divider\n    p.moveTo(cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback));\n    p.onBezierCurve(\n      undefined,\n      undefined,\n      cx + r  * roundnessOutside * Math.cos(startAngle + pullback),\n      cy + r  * roundnessOutside * Math.sin(startAngle + pullback),\n      cx + r * Math.cos((startAngle + anchorForward)),\n      cy + r * Math.sin((startAngle + anchorForward)),\n      cx + r * roundnessInside * Math.cos(startAngle + pullback),\n      cy + r  * roundnessInside * Math.sin(startAngle + pullback),\n    );\n  }else{\n    //This is for the main arc of the pie chart\n    p.moveTo(cx + r * Math.cos(startAngle), cy + r * Math.sin(startAngle));\n    p.onArc(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      cx,\n      cy,\n      r,\n      r,\n      startAngle,\n      startAngle + arcAngle,\n    )\n  }\n  return p;\n}\n\nconst ArcShape = ({dimensions, color, strokeCap, startAngle, arcAngle, isBezian}) => {\n  const {radius, innerRadius, width, dividerSize} = dimensions;\n  const path = createPath(\n    radius,\n    radius,\n    radius - width / 2,\n    startAngle / 180 * Math.PI,\n    arcAngle / 180 * Math.PI,\n    isBezian,\n    innerRadius,\n  );\n  const strokeWidth = isBezian ? (arcAngle * 5) : width;\n  return <Shape d={path} stroke={color} strokeWidth={strokeWidth} strokeCap={strokeCap} />;\n};\n\n//The initial band to set the backgroundColor behind the pie chart\nconst Background = ({dimensions, color}) => {\n  return <ArcShape dimensions={dimensions} color={color} startAngle={0} arcAngle={360} />\n}\n\nconst getArcAngle = (percentage) => percentage / 100 * 360;\nconst shouldShowDivider = (sections, dividerSize) => sections.length > 1 && !Number.isNaN(dividerSize);\n\nconst Sections = ({dimensions, paintedSections, sections, shouldShowRoundDividers, strokeCapForLargeBands}) => {\n  let startValue = 0;\n  const {radius, width, dividerSize} = dimensions;\n  const showDividers = shouldShowDivider(sections, dividerSize);\n  paintedSections = sections.map((section, idx) => {\n    const { percentage, color } = section;\n    const startAngle = startValue / 100 * 360;\n    const arcAngle = getArcAngle(percentage);\n    startValue += percentage;\n    shouldShowRoundDividers && paintedSections.push({ percentage, color, startAngle, arcAngle });\n    return <ArcShape\n      key={idx}\n      dimensions={dimensions}\n      color={color}\n      startAngle={showDividers ? startAngle + dividerSize : startAngle}\n      arcAngle={showDividers ? arcAngle - dividerSize : arcAngle}\n      strokeCap={strokeCapForLargeBands}\n    />;\n  })\n  return paintedSections;\n}\n\n\n// These are the rounded dividers when strokeCap='round'\nconst RoundDividers = ({ dimensions, paintedSections, backgroundColor, visible }) => {\n  const {dividerSize, radius, innerRadius, width} = dimensions;\n  const dividerOffSet = (dividerSize * 2) + 6;\n  const strokeCap = 'butt';\n  const isBezian = true;\n  let dividerColorOverlayArray = [];\n  let dividerArray = [];\n  \n  if(paintedSections.length > 1 && visible){\n    \n    paintedSections.forEach((section, index) => {\n      const { color, startAngle } = section;\n      \n      for(let i = 0; i < dividerSize + 2; i++){\n        dividerArray.push(<ArcShape\n          key={index}\n          dimensions={dimensions}\n          color={backgroundColor}\n          startAngle={startAngle + section.arcAngle + dividerSize + i - dividerOffSet}\n          arcAngle={1}\n          isBezian={isBezian}\n          strokeCap={strokeCap}\n        />);\n        dividerColorOverlayArray.push(<ArcShape\n          key={index}\n          dimensions={dimensions}\n          color={color}\n          startAngle={startAngle + section.arcAngle - dividerSize + i - dividerOffSet}\n          arcAngle={1}\n          isBezian={isBezian}\n          strokeCap={strokeCap}\n        />);\n      }\n      \n  });\n  }\n  return ( \n    <Group>\n      {dividerArray}\n      {dividerColorOverlayArray}\n    </Group>\n  );\n};\n\n// These circles clean up the strokes left over from the bezian curves\nconst CleanUpCircles = ({dimensions, backgroundColor, visible}) => {\n  const { radius, innerRadius, width} = dimensions;\n  const innerBackgroundPath = createPath(radius, radius, innerRadius - ((width) / 2), 0, 360);\n  const outerBackgroundPath = createPath(radius, radius, radius + ((width)) / 2, 0, 360);\n  if((width) < 100 && visible){\n    return (<>\n      <Shape\n          d={innerBackgroundPath}\n          stroke={backgroundColor}\n          strokeWidth={width}\n      />\n      <Shape\n        d={outerBackgroundPath}\n        stroke={backgroundColor}\n        strokeWidth={width}\n      />\n    </>)\n  }\n  return null;\n}\n\nconst Pie = ({ sections, radius, innerRadius, backgroundColor, strokeCap, dividerSize }) => {\n  strokeCapForLargeBands = dividerSize > 0 || strokeCap == 'butt' ? 'butt' : 'butt';\n  const shouldShowRoundDividers = strokeCap === 'round';\n  let paintedSections = [];\n  \n  // This is the width for the arc\n  const width = radius - innerRadius;\n  const dimensions = { radius, innerRadius, width, dividerSize };\n  \n  return (\n    <Surface width={radius * 2} height={radius * 2}>\n      <Group rotation={-90} originX={radius} originY={radius}>\n        <Background dimensions={dimensions} color={backgroundColor} />\n        <Sections \n          dimensions={dimensions} \n          paintedSections={paintedSections} \n          sections={sections} \n          strokeCapForLargeBands={strokeCapForLargeBands} \n          shouldShowRoundDividers={shouldShowRoundDividers} \n        />\n        <RoundDividers \n          dimensions={dimensions}\n          paintedSections={paintedSections}\n          backgroundColor={backgroundColor}\n          visible={shouldShowRoundDividers}\n        />\n        <CleanUpCircles \n          dimensions={dimensions} \n          backgroundColor={backgroundColor} \n          visible={shouldShowRoundDividers}\n        />\n      </Group>\n    </Surface>\n  );\n};\n\nexport default Pie;\n\nPie.propTypes = {\n  sections: PropTypes.arrayOf(\n    PropTypes.exact({\n      percentage: PropTypes.number.isRequired,\n      color: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  strokeCap: PropTypes.string,\n  dividerSize: PropTypes.number,\n};\n\nPie.defaultProps = {\n  dividerSize: 0,\n  innerRadius: 0,\n  backgroundColor: '#fff',\n  strokeCap: 'butt',\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}